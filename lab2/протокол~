Токен содержит
	- progress
	- карту сети

Узел содержит
	- состояние
	- progress
	- карту сети
	- счётчики для таймаутов
	- ???
	- PROFIT!!!

Узел может находится в 4 состояниях:
	TOKEN_HOLDER - узел владеет токеном
	WAITER		 - узел ждёт сообщения от хранителя токена < таймаута (WAITER_TIMEOUT)
	LOST_TOKEN	 - бывший WAITER, у которого закончился WAITER_TIMEOUT
	CANDIDATE	 - узел участвует в голосовании за право сгенерировать токен

Виды сообщений:
	I_HAVE_TOKEN_MSG  	 - сообщение от TOKEN_HOLDER, c инфой о текущем progressе и своём MAC
	SEND_MAC_MSG	  	 - сообщение, в ответ на которое узел отсылает свой MAC  (? по TCP или broadcast'ом ?)
	I_REMOVED_TOKEN_MSG  - сообщение от TOKEN_HOLDER, к другому TOKEN_HOLDER, что наш токен удалён. Отвечать на него не надо.
	I_LOST_TOKEN_MSG	 - сообщение от LOST_TOKEN узла о том, что потерян TOKEN_HOLDER.
	I_RECENTLY_HEARD_TOKEN_HOLDER_MSG - ответное сообщение на I_LOST_TOKEN_MSG от WAITER узла.
	I_AM_A_CANDIDATE_MSG - сообщение от CANDIDATE узла c инфой о своём приоритете с запросом стать TOKEN_HOLDER.
	
Виды констант:
	TIC			       - частота, с которой TOKEN_HOLDER броадкастит сообщение I_HAVE_TOKEN_MSG
	WAITER_TIMEOUT     - таймаут, который WAITER ждёт сообщения I_HAVE_TOKEN_MSG
	LOST_TOKEN_TIMEOUT - таймаут, который LOST_TOKEN ждёт сообщение от WAITER или TOKEN_HOLDER
	CANDIDATE_TIMEOUT  - таймаут, который CANDIDATE ждёт ответ на своё сообщение I_AM_A_CANDIDATE_MSG

Замечания:
- Приоритетом узла мы считаем кортеж (progress, MAC). Узел x имеет больший приоритет чем узел y, если x.progress > y.progress || (x.progress == y.progress && x.MAC < y.MAC).
- В начале работы узел является WAITER'ом.
- Каждый узел хранит текущий progress.
- При получении сообщения от неизвестного отправителя добавляем его в "карту сети"

Что делает узел в зависимости от состояния:
	- TOKEN_HOLDER
		Каждый фиксированный промежуток времени (TIC) такой узел броадкастит сообщение I_HAVE_TOKEN_MSG (*с информацией о своём текущем progressе и своим MAC)
		После подсчёта токена, с вероятностью 1/n (n - размер "карты сети") обновляет карту сети, а именно делает броадкаст с сообщением SEND_MAC_MSG (*в ответ на это
		сообщение узел отсылает свой MAC *и мб служебную информацию необходимую для связи с ним?) 
		В качестве следующего хранителя токена узел берёт следующий после себя узел в "карте сети". Если удалось установить соединение со следующим - передаём токен. Если не удалось (*то есть узел не активен, закончился таймаут) - удаляем этот узел из сети и повторяем поиск следующего.
		Если приходит сообщение I_HAVE_TOKEN_MSG с отличным(!) от нашего MAC, это значит, что в сети есть ещё один узел в состоянии TOKEN_HOLDER. Тогда мы сравниваем пришедший progress и MAC с нашим. Если у нас приоритет больше (больше progress или, при равенстве progressов, больше/меньше MAC), то мы игнорируем это сообщение, иначе мы отправляем сообщение отправителю в ответ I_REMOVED_TOKEN_MSG и в случае доставки удаляем наш токен.
		После передачи/удаления токена переходим в состояние WAITER.
	- WAITER
		Ждёт сообщения I_HAVE_TOKEN_MSG не больше WAITER_TIMEOUT. Если в течение WAITER_TIMEOUT не пришло сообщение I_HAVE_TOKEN_MSG, узел переходит в состояние LOST_TOKEN. Если приходит сообщение I_LOST_TOKEN_MSG или I_AM_A_CANDIDATE_MSG, отсылаем в ответ сообщение I_RECENTLY_HEARD_TOKEN_HOLDER_MSG.
		Если получает сообщение I_LOST_TOKEN, отсылает в ответ I_RECENTLY_HEARD_TOKEN_HOLDER_MSG.
	- LOST_TOKEN
		При переходе в это состояние узел начанает делать броадкаст сообщения I_LOST_TOKEN_MSG. Если в течение LOST_TOKEN_TIMEOUT:
			- приходит сообщение I_HAVE_TOKEN_MSG, узел возвращается в состояние WAITER
			- приходит сообщение I_RECENTLY_HEARD_TOKEN_HOLDER_MSG, узел сбрасывает счётчик таймаута и заного рассылает сообщение I_LOST_TOKEN_MSG
			- иначе, считаем, что в сети нет TOKEN_HOLDER и WAITER, и значит надо сгенерировать новый токен. Переходим в состояние CANDIDATE
		Если приходит сообщение I_AM_A_CANDIDATE_MSG, то если пришедший приоритет 
			- ниже чем наш, то узел переходит в состояние CANDIDATE
			- иначе, узел сбрасывает счётчик таймаута и заного рассылает сообщение I_LOST_TOKEN_MSG
	- CANDIDATE
		Как только узел переходит в это состояние он становится кандидатом на то, чтобы стать TOKEN_HOLDER. Узел делает броадкаст I_AM_A_CANDIDATE_MSG со своим приоритетом. Если в течение CANDIDATE_TIMEOUT узел:
			- получает сообщение I_AM_A_CANDIDATE_MSG с большим приоритетом чем у себя
							 	или I_RECENTLY_HEARD_TOKEN_HOLDER_MSG
							 	или I_HAVE_TOKEN_MSG,
							  	 то узел переходит в состояние WAITER
			- иначе, считает, что "выиграл" голосование и переходит в состояние TOKEN_HOLDER
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
